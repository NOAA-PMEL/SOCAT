package uk.ac.uea.socat.sanitychecker;

import java.util.Enumeration;
import java.util.Properties;

/**
 * Any message generated by the Sanity Checker will be represented
 * by a Message object, which describes where the message was generated,
 * its severity, and any additional properties that may be useful.
 * 
 * @author uuk07qzu
 */
public class Message {

	/**
	 * Value indicating that this message is from the Data section
	 * of the input file
	 */
	public static final int DATA_MESSAGE = 1;
	
	/**
	 * Value indicating that this message is from the Metadata section
	 * of the input file
	 */
	public static final int METADATA_MESSAGE = 2;

	/**
	 * Value indicating that this message is an error
	 */
	public static final int WARNING = 0;
	
	/**
	 * Value indicating that this message is a warning
	 */
	public static final int ERROR = 1;
	
	/**
	 * The label that indicates this message property
	 * contains a name.
	 */
	public static final String NAME_PROPERTY = "name";
	
	/**
	 * The label that indicates this message property
	 * contains the minimum value for a range.
	 */
	public static final String MIN_PROPERTY = "min";
	
	/**
	 * The label that indicates this message property
	 * contains the maximum value for a range.
	 */
	public static final String MAX_PROPERTY = "max";
	
	/**
	 * The type of this message: either {@link #DATA_MESSAGE} or {@link #METADATA_MESSAGE}.
	 */
	protected int itsMessageType;
	
	/**
	 * The line to which the message refers.
	 * For a Metadata message, this is the line of the data file.
	 * For a Data message, this is the record number (i.e. ignoring all metadata and header lines).
	 */
	protected int itsLine;

	/**
	 * The severity of the message: either {@link #ERROR} or {@link #WARNING}.
	 */
	private int itsSeverity;
	
	/**
	 * The message text
	 */
	protected String itsMessage;
	
	/**
	 * Additional properties that can be attached to the message.
	 */
	private Properties itsProperties;

	/**
	 * The index of the location on the input line that caused the message to be generated.
	 * Typically this will be a column index.
	 * 
	 * This allows the offending item to be located in the original input file.
	 */
	private int itsInputItemIndex;
	
	/**
	 * The name of the location on the input line that caused the message to be generated.
	 * Typically this will be a column name.
	 * 
	 * This allows the offending item to be located in the original input file.
	 */
	private String itsInputItemName;
	
	/**
	 * The index of the location on the converted line that caused the message to be generated.
	 * Typically this will be a column index
	 * 
	 * This allows the offending item to be located in the converted SOCAT file.
	 */
	private int itsItemIndex;
	
	/**
	 * The name of the location on the converted line that caused the message to be generated.
	 * Typically this will be a column name.
	 * 
	 * This allows the offending item to be located in the converted SOCAT file.
	 */
	private String itsItemName;
	
	/**
	 * Creates a new message object.
	 * @param type The message type. Either {@link #METADATA_MESSAGE} or {@link #DATA_MESSAGE}.
	 * @param severity The severity of the message. Either {@link #ERROR} or {@link #WARNING}.
	 * @param line The line for which the message was generated.
	 * @param message The message text.
	 */
	public Message(int type, int severity, int line, String message) {
		itsMessageType = type;
		itsSeverity = severity;
		itsLine = line;
		itsMessage = message;
		itsProperties = new Properties();
		
		itsInputItemIndex = -1;
		itsInputItemName = null;
		itsItemIndex = -1;
		itsItemName = null;
	}
	
	/**
	 * Creates a new message object.
	 * @param type The message type. Either {@link #METADATA_MESSAGE} or {@link #DATA_MESSAGE}.
	 * @param severity The severity of the message. Either {@link #ERROR} or {@link #WARNING}.
	 * @param line The line for which the message was generated.
	 * @param inputItemIndex The index of the location in the input file where for which the message was generated.
	 * @param inputItemName The name of the location in the input file where for which the message was generated.
	 * @param itemIndex The index of the location in the converted SOCAT file where for which the message was generated.
	 * @param itemName The name of the location in the converted SOCAT file where for which the message was generated.
	 * @param message The message text.
	 */
	public Message(int type, int severity, int line, int inputItemIndex, String inputItemName, int itemIndex, String itemName, String message) {
		itsMessageType = type;
		itsSeverity = severity;
		itsLine = line;
		itsMessage = message;
		itsProperties = new Properties();
		
		itsInputItemIndex = inputItemIndex;
		itsInputItemName = inputItemName;

		itsItemIndex = itemIndex;
		itsItemName = itemName;
	}
	
	/**
	 * Creates a new message object.
	 * @param type The message type. Either {@link #METADATA_MESSAGE} or {@link #DATA_MESSAGE}.
	 * @param severity The severity of the message. Either {@link #ERROR} or {@link #WARNING}.
	 * @param line The line for which the message was generated.
	 * @param name The name of the location in the converted SOCAT file where for which the message was generated.
	 * @param message The message text.
	 */
	public Message(int type, int severity, int line, String name, String message) {
		itsMessageType = type;
		itsSeverity = severity;
		itsLine = line;
		itsMessage = message;
		itsProperties = new Properties();
		
		itsInputItemIndex = -1;
		itsInputItemName = null;
		itsItemIndex = -1;
		itsItemName = name;
	}
	
	/**
	 * Adds a named property to the message.
	 * @param name The name of the property
	 * @param value The property's value
	 */
	public void addProperty(String name, String value) {
		itsProperties.setProperty(name, value);
	}
	
	/**
	 * Get the severity of the message (Error or Warning).
	 * @return The severity of the message
	 */
	public int getSeverity() {
		return itsSeverity;
	}
	
	/**
	 * Returns whether or not this message represents an error.
	 * @return {@code true} if this message represents an error, {@code false} otherwise.
	 */
	public boolean isError() {
		return itsSeverity == ERROR;
	}
	
	/**
	 * Returns whether or not this message represents a warning.
	 * @return {@code true} if this message represents a warning, {@code false} otherwise.
	 */
	public boolean isWarning() {
		return itsSeverity == WARNING;
	}

	/**
	 * Get the type of this message (Data Message or Metadata Message).
	 * @return
	 */
	public int getMessageType() {
		return itsMessageType;
	}

	/**
	 * Get the line number in the input file from where the message was generated.
	 * For Metadata Messages, this is the line of the data file.
	 * For Data Messages, this is the record number (i.e. ignoring all metadata and header lines).
	 * @return The line number in the input file from where the message was generated.
	 */
	public int getLineNumber() {
		return itsLine;
	}

	/**
	 * Get the index of the location on the converted line that caused the message to be generated.
	 * Typically this will be a column index.
	 * 
	 * This allows the offending item to be located in the converted SOCAT file.
	 * @return The index of the location on the converted line that caused the message to be generated.
	 */
	public int getItemIndex() {
		return itsItemIndex;
	}
	
	/**
	 * Get the name of the location on the converted line that caused the message to be generated.
	 * Typically this will be a column name.
	 * 
	 * This allows the offending item to be located in the converted SOCAT file.
	 * @return The name of the location on the converted line that caused the message to be generated.
	 */
	public String getItemName() {
		return itsItemName;
	}
	
	/**
	 * Get the index of the location on the input line that caused the message to be generated.
	 * Typically this will be a column index.
	 * 
	 * This allows the offending item to be located in the original input file.
	 * @returnThe index of the location on the input line that caused the message to be generated.
	 */
	public int getInputItemIndex() {
		return itsInputItemIndex;
	}
	
	/**
	 * Get the name of the location on the input line that caused the message to be generated.
	 * Typically this will be a column name.
	 * 
	 * This allows the offending item to be located in the original input file.
	 * @return The name of the location on the input line that caused the message to be generated.
	 */
	public String getInputItemName() {
		return itsInputItemName;
	}

	/**
	 * Produce the String representation of this message.
	 */
	public String toString() {
		StringBuffer output = new StringBuffer();
		
		if (isWarning()) {
			output.append("WARNING: ");
		} else if (isError()) {
			output.append("ERROR: ");
		}
		
		if (itsLine != -1) {
			output.append("LINE " + itsLine + ":");
		}

		if (itsInputItemIndex >= 0) {
			output.append(" ITEM " + itsInputItemIndex + " ('" + itsInputItemName + "'):");
		} else if (null != itsInputItemName) {
			output.append(" ITEM '" + itsInputItemName + "':");
		}

		output.append(" " + itsMessage);
		
		if (itsProperties.size() > 0) {
			output.append("\n");
			Enumeration<?> propNames = itsProperties.propertyNames();
			while (propNames.hasMoreElements()) {
				String name = (String) propNames.nextElement();
				output.append("  " + name + " = " + itsProperties.getProperty(name) + "\n");
			}
		}

		return output.toString();
	}
	
	/**
	 * Returns the value of the named property in this message.
	 * 
	 * @see java.util.Properties#getProperty(String)
	 * @param name The name of the property.
	 * @return 
	 */
	public String getProperty(String name) {
		return itsProperties.getProperty(name);
	}

	/**
	 * Returns an enumeration of the names of all the properties attached to this message.
	 * @see java.util.Properties#propertyNames()
	 * @return An enumeration of the names of all the properties attached to this message.
	 */
	public Enumeration<?> getPropertyNames() {
		return itsProperties.propertyNames();
	}

	/**
	 * Returns the text of the message.
	 * @return The text of the message.
	 */
	public String getMessage() {
		return itsMessage;
	}

}
