/**
 * 
 */
package gov.noaa.pmel.socat.dashboard.client;

import gov.noaa.pmel.socat.dashboard.shared.CruiseDataColumnType;
import gov.noaa.pmel.socat.dashboard.shared.DashboardUtils;

import java.util.ArrayList;

import com.google.gwt.cell.client.Cell;
import com.google.gwt.cell.client.CompositeCell;
import com.google.gwt.cell.client.FieldUpdater;
import com.google.gwt.cell.client.HasCell;
import com.google.gwt.cell.client.SelectionCell;
import com.google.gwt.cell.client.TextCell;
import com.google.gwt.safehtml.shared.SafeHtmlBuilder;
import com.google.gwt.user.cellview.client.Header;

/**
 * Class for creating a CompositeCell Header for a CruiseDataColumnType object.
 * 
 * @author Karl Smith
 */
public class CruiseDataColumnHeader {

	private CruiseDataColumnType columnType;
	private Header<CruiseDataColumnType> headerCell;

	/**
	 * Creates a Header, associated with the given CruiseDataColumnType
	 * object, which is a CompositeCell of a TextCell, for displaying 
	 * the user-provided column name, and a SelectionCell, for selecting 
	 * the standard column type.
	 * @param colType
	 * 		CruiseDataColumnType object to associate with this Header
	 */
	CruiseDataColumnHeader(CruiseDataColumnType columnType) {
		// The column type object associated with this instance
		this.columnType = columnType;

		// The TextCell giving the column name given by the user
		HasCell<CruiseDataColumnType,String> userNameCell = 
				new HasCell<CruiseDataColumnType,String>() {
			// Create a TextCell which is rendered as a block-level element
			TextCell userTextCell = new TextCell() {
				@Override
				public void render(Cell.Context context, String value, 
										SafeHtmlBuilder sb) {
					sb.appendHtmlConstant("<div>");
					super.render(context, value, sb);
					sb.appendHtmlConstant("</div>");
				}
			};
			@Override
			public TextCell getCell() {
				return userTextCell;
			}
			@Override
			public FieldUpdater<CruiseDataColumnType,String> getFieldUpdater() {
				return null;
			}
			@Override
			public String getValue(CruiseDataColumnType colType) {
				return colType.getUserHeaderName();
			}
		};

		// The SelectionCell listing the known standard headers
		HasCell<CruiseDataColumnType,String> stdNameCell = 
				new HasCell<CruiseDataColumnType,String>() {
			SelectionCell typeSelectCell = 
					new SelectionCell(DashboardUtils.STD_DATA_HEADER_NAMES);
			@Override
			public SelectionCell getCell() {
				return typeSelectCell;
			}
			@Override
			public FieldUpdater<CruiseDataColumnType,String> getFieldUpdater() {
				return new FieldUpdater<CruiseDataColumnType,String>() {
					@Override
					public void update(int index, 
							CruiseDataColumnType colType, String value) {
						int stdColNum = DashboardUtils.STD_DATA_HEADER_NAMES
													  .indexOf(value);
						if ( stdColNum < 0 )
							throw new IllegalArgumentException(
									"Unexpected update value: " + value);
						colType.setStdColumnNum(stdColNum);
						colType.setDataType(DashboardUtils.STD_DATA_TYPES
														  .get(stdColNum));
						colType.setStdHeaderName(value);
						if ( (stdColNum != DashboardUtils.DELETE_DATA_STD_COLUMN_NUM) &&
							 (stdColNum != DashboardUtils.UNKNOWN_DATA_STD_COLUMN_NUM) &&
							 (stdColNum != DashboardUtils.SUPPLEMENTAL_DATA_STD_COLUMN_NUM) )
							colType.setDescription(DashboardUtils.STD_DATA_DESCRIPTIONS
																 .get(stdColNum));
					}
				};
			}
			@Override
			public String getValue(CruiseDataColumnType colType) {
				return colType.getStdHeaderName();
			}
		};

		// Create the CompositeCell to be used for the header
		ArrayList<HasCell<CruiseDataColumnType,?>> cellList = 
				new ArrayList<HasCell<CruiseDataColumnType,?>>(2);
		cellList.add(userNameCell);
		cellList.add(stdNameCell);
		CompositeCell<CruiseDataColumnType> compCell =
				new CompositeCell<CruiseDataColumnType>(cellList);
		
		headerCell = new Header<CruiseDataColumnType>(compCell) {
			@Override
			public CruiseDataColumnType getValue() {
				return CruiseDataColumnHeader.this.columnType;
			}
		};
	}

	/**
	 * @return
	 * 		the Header generated by this CruiseDataColumnHeader
	 */
	Header<CruiseDataColumnType> getHeader() {
		return headerCell;
	}

}
